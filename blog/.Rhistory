predicted_values <- predicted_values %>% append(list("lm1"=lm1_pred_binary))
predict(tree, newdata=test)
tree_pred <- predict(tree, newdata=test)
predicted_values <- predicted_values %>% append(list("cart"=tree_pred))
tree_pred
tree_pred <- round(tree_pred)
predicted_values <- predicted_values %>% append(list("cart"=tree_pred))
predicted_values
precision_scores <- lapply(predicted_values, precision, reference = as.factor(test$empire))
?precision
??precision
ipak("caret")
ipak("caret")
precision_scores <- lapply(predicted_values, precision, reference = as.factor(test$empire))
predicted_values <- predicted_values %>% append(list("cart"=as.factor(tree_pred)))
predicted_values <- list()
lm1 <- lm(empire ~ ., data= train)
summary(lm1)
lm1_pred <- predict(lm1, newdata = test)
lm1_pred_binary <- round(lm1_pred)
auc_lm1 <- pROC::roc(test_y, lm1_pred)
plot(auc_lm1)
predicted_values <- predicted_values %>% append(list("lm1"=as.factor(lm1_pred_binary)))
tree <- rpart::rpart(empire ~ ., data=train)
prp(tree)
tree_pred <- predict(tree, newdata=test)
tree_pred <- round(tree_pred)
predicted_values <- predicted_values %>% append(list("cart"=as.factor(tree_pred)))
ipak("caret")
precision_scores <- lapply(predicted_values, precision, reference = as.factor(test$empire))
recall_scores <- lapply(predicted_values, recall, reference = as.factor(test$empire))
F1_scores <- lapply(predicted_values, F_meas, reference = as.factor(test$empire))
precision_scores
recall_scores
F1_scores
rand <- randomForest(as.factor(empire) ~ ., data=train, na.action=na.omit)
ipak("randomForest")
rand <- randomForest(as.factor(empire) ~ ., data=train, na.action=na.omit)
View(train)
rand <- randomForest(as.factor(empire) ~ ., data=train)
train
?randomForest
train$`Age_> 60`
train %>% drop_na()
rand <- randomForest(as.factor(empire) ~ ., data=train)
train <- train %>%
mutate_if(is.character, as.factor)
test <- test %>%
mutate_if(is.character, as.factor)
ipak("randomForest")
rand <- randomForest(as.factor(empire) ~ ., data=train)
colnames(train)
colnames(Train) <- gsub(colnames(train), pattern=" ", replacement="")
colnames(train) <- gsub(colnames(train), pattern=" ", replacement="")
rand <- randomForest(as.factor(empire) ~ ., data=train)
train$`Age_>60`
rand <- randomForest(as.factor(empire) ~ ., data=train, na.action = na.omit)
rand <- randomForest(as.factor(empire) ~ . - 'Age_>60', data=train, na.action = na.omit)
rand <- randomForest(as.factor(empire) ~ 'Age_>60', data=train, na.action = na.omit)
rand <- randomForest(as.factor(empire) ~ Gender_Male, data=train, na.action = na.omit)
rand
print(rand)
train <- train %>%
mutate_if(is.integer, as.factor)
rand <- randomForest(as.factor(empire) ~ ., data=train, na.action = na.omit)
rand <- randomForest(empire ~ ., data=train, na.action = na.omit)
rand <- randomForest(empire ~ ., data=test, na.action = na.omit)
rand <- randomForest(empire ~ ., data=train, na.action = na.omit)
head(raw_dat)
dat <- raw_dat
colnames(dat)[4:9] <- colnames(dat)[4]
colnames(dat)[10:15] <- colnames(dat)[10]
colnames(dat)[16:29] <- colnames(dat)[16]
questions <- colnames(dat)
responses <- raw_dat %>% filter(is.na(RespondentID)) %>% as.character()
responses[responses=="NA"] <- ""
responses[responses=="Response"] <- ""
knitted <- paste(questions, responses, sep=" ")
knitted <- trimws(knitted)
dat <- raw_dat %>% filter(is.na(RespondentID)==F)
colnames(dat) <- knitted
head(dat)
tidy_dat <- dat %>%
gather(key="question", value="response", -RespondentID)
tidy_dat$response[grepl(tidy_dat$question, pattern="Please\\.select\\.all") & tidy_dat$response!=""] <- "Yes"
tidy_dat$response[grepl(tidy_dat$question, pattern="Please\\.select\\.all") & tidy_dat$response==""] <- "No"
model_data <- tidy_dat %>% spread(key=question, value=response)
model_data <-
model_data %>%
rename(empire = "Please.rank.the.Star.Wars.films.in.order.of.preference.with.1.being.your.favorite.film.in.the.franchise.and.6.being.your.least.favorite.film. Star Wars: Episode V The Empire Strikes Back") %>%
filter(empire!="") %>%
mutate(empire = if_else(empire==1, 1, 0))
model_data <- model_data %>%
select(RespondentID, Age, Gender, Education, Household.Income, Location..Census.Region., Which.character.shot.first., Are.you.familiar.with.the.Expanded.Universe., Do.you.consider.yourself.to.be.a.fan.of.the.Expanded.Universe..æ, empire)
model_data <- model_data %>% fastDummies::dummy_cols() %>% select(-c(Age, Gender, Education, Household.Income, Location..Census.Region., Which.character.shot.first., Are.you.familiar.with.the.Expanded.Universe., Do.you.consider.yourself.to.be.a.fan.of.the.Expanded.Universe..æ))
train <- sample_frac(model_data, size=0.8)
test <- model_data %>% filter(!RespondentID %in% train$RespondentID)
train <- train %>% select(-RespondentID)
test <- test %>% select(-RespondentID)
test_y <- test %>% pull(empire)
models_list <- list()
predicted_values <- list()
lm1 <- lm(empire ~ ., data= train)
summary(lm1)
lm1_pred <- predict(lm1, newdata = test)
lm1_pred_binary <- round(lm1_pred)
auc_lm1 <- pROC::roc(test_y, lm1_pred)
plot(auc_lm1)
predicted_values <- predicted_values %>% append(list("lm1"=as.factor(lm1_pred_binary)))
tree <- rpart::rpart(empire ~ ., data=train)
prp(tree)
tree_pred <- predict(tree, newdata=test)
tree_pred <- round(tree_pred)
predicted_values <- predicted_values %>% append(list("cart"=as.factor(tree_pred)))
prp(tree)
tree <- rpart::rpart(empire ~ ., data=train)
tree
lm1 <- lm(empire ~ ., data= train)
summary(lm1)
tree <- rpart::rpart(empire ~ ., data=train)
prp(tree)
tree_pred <- predict(tree, newdata=test)
tree_pred <- round(tree_pred)
tree_pred
rand <- randomForest(empire ~ ., data=train, na.action = na.omit)
pca <- prcomp(train, center = TRUE,scale. = TRUE)
summary(pca)
ggbiplot(pca, alpha=0.3)
ipak("ggbiplot")
ggbiplot(pca, alpha=0.3)
F1_scores
glm(empire ~ ., data= train, family="binomial")
glm1 <- glm(empire ~ ., data= train, family="binomial")
summary(glm1)
gam::gam(empire ~ ., data= train)
gam1 <- gam::gam(empire ~ ., data= train)
summary(gam1)
glm1 <- glm(empire ~ ., data= train, family="binomial")
summary(glm1)
glm1_pred <- predict(glm1, newdata = test)
glm1_pred_binary <- round(glm1_pred)
gam1 <- gam::gam(empire ~ ., data= train)
summary(gam1)
gam1_pred <- predict(gam1, newdata = test)
gam1_pred_binary <- round(gam1_pred)
gam1_pred_binary
predicted_values <- predicted_values %>% append(list("glm1"=as.factor(glm1_pred_binary),
"gam1"=as.factor(gam1_pred_binary)))
precision_scores <- lapply(predicted_values, precision, reference = as.factor(test$empire))
precision_scores <- lapply(predicted_values, precision, reference = as.factor(test$empire))
predicted_values
glm1_pred[glm1_pred<0.5] <- 0
glm1_pred_binary <- round(glm1_pred)
glm1_pred_binary
glm1_pred[glm1_pred<0.5] <- 0
glm1_pred[glm1_pred>=0.5] <- 1
glm1_pred_binary <- round(glm1_pred)
predicted_values <- list()
lm1 <- lm(empire ~ ., data= train)
summary(lm1)
lm1_pred <- predict(lm1, newdata = test)
lm1_pred_binary <- round(lm1_pred)
auc_lm1 <- pROC::roc(test_y, lm1_pred)
plot(auc_lm1)
predicted_values <- predicted_values %>% append(list("lm1"=as.factor(lm1_pred_binary)))
glm1 <- glm(empire ~ ., data= train, family="binomial")
summary(glm1)
glm1_pred <- predict(glm1, newdata = test)
glm1_pred[glm1_pred<0.5] <- 0
glm1_pred[glm1_pred>=0.5] <- 1
gam1 <- gam::gam(empire ~ ., data= train)
summary(gam1)
gam1_pred <- predict(gam1, newdata = test)
gam1_pred_binary <- round(gam1_pred)
predicted_values <- predicted_values %>% append(list("glm1"=as.factor(glm1_pred_binary),
"gam1"=as.factor(gam1_pred_binary)))
pca <- prcomp(train, center = TRUE,scale. = TRUE)
summary(pca)
ipak("ggbiplot")
ggbiplot(pca, alpha=0.3)
tree <- rpart::rpart(empire ~ ., data=train)
prp(tree)
tree_pred <- predict(tree, newdata=test)
tree_pred <- round(tree_pred)
predicted_values <- predicted_values %>% append(list("cart"=as.factor(tree_pred)))
precision_scores <- lapply(predicted_values, precision, reference = as.factor(test$empire))
predicted_values
?as.factor
predicted_values <- predicted_values %>% append(list("cart"=as.factor(tree_pred, levels=c(0,1))))
predicted_values <- predicted_values %>% append(list("cart"=as.factor(tree_pred, levels=c("0","1"))))
levels(tree_pred) <- c("0", "1")
tree_pred <- as.factor(tree_pred)
levels(tree_pred) <- c("0", "1")
tree_pred
predicted_values <- predicted_values %>% append(list("cart"=tree_pred))
predicted_values <- list()
lm1 <- lm(empire ~ ., data= train)
summary(lm1)
lm1_pred <- predict(lm1, newdata = test)
lm1_pred_binary <- round(lm1_pred)
auc_lm1 <- pROC::roc(test_y, lm1_pred)
plot(auc_lm1)
predicted_values <- predicted_values %>% append(list("lm1"=as.factor(lm1_pred_binary)))
glm1 <- glm(empire ~ ., data= train, family="binomial")
summary(glm1)
glm1_pred <- predict(glm1, newdata = test)
glm1_pred[glm1_pred<0.5] <- 0
glm1_pred[glm1_pred>=0.5] <- 1
gam1 <- gam::gam(empire ~ ., data= train)
summary(gam1)
gam1_pred <- predict(gam1, newdata = test)
gam1_pred_binary <- round(gam1_pred)
predicted_values <- predicted_values %>% append(list("glm1"=as.factor(glm1_pred_binary),
"gam1"=as.factor(gam1_pred_binary)))
pca <- prcomp(train, center = TRUE,scale. = TRUE)
summary(pca)
ipak("ggbiplot")
ggbiplot(pca, alpha=0.3)
tree <- rpart::rpart(empire ~ ., data=train)
prp(tree)
?as.factor
tree_pred <- predict(tree, newdata=test)
tree_pred <- round(tree_pred)
tree_pred <- as.factor(tree_pred)
levels(tree_pred) <- c("0", "1")
predicted_values <- predicted_values %>% append(list("cart"=tree_pred))
precision_scores <- lapply(predicted_values, precision, reference = as.factor(test$empire))
recall_scores <- lapply(predicted_values, recall, reference = as.factor(test$empire))
F1_scores <- lapply(predicted_values, F_meas, reference = as.factor(test$empire))
F1_scores
recall_scores <- lapply(predicted_values, recall, reference = as.factor(test$empire))
recall_scores
precision_scores
F1_scores
tree_pred
View(train)
model_data <- tidy_dat %>% spread(key=question, value=response)
Then, I start with only looking at Empire Strikes Back as the favourite.
Get data ready for modeling.
```{r}
model_data <-
model_data %>%
rename(empire = "Please.rank.the.Star.Wars.films.in.order.of.preference.with.1.being.your.favorite.film.in.the.franchise.and.6.being.your.least.favorite.film. Star Wars: Episode V The Empire Strikes Back") %>%
filter(empire!="") %>%
mutate(empire = if_else(empire==1, 1, 0))
model_data <-
model_data %>%
rename(empire = "Please.rank.the.Star.Wars.films.in.order.of.preference.with.1.being.your.favorite.film.in.the.franchise.and.6.being.your.least.favorite.film. Star Wars: Episode V The Empire Strikes Back") %>%
filter(empire!="") %>%
mutate(empire = if_else(empire==1, 1, 0))
model_data <- tidy_dat %>% spread(key=question, value=response)
model_data <-
model_data %>%
rename(empire = "Please.rank.the.Star.Wars.films.in.order.of.preference.with.1.being.your.favorite.film.in.the.franchise.and.6.being.your.least.favorite.film. Star Wars: Episode V The Empire Strikes Back") %>%
filter(empire!="") %>%
mutate(empire = if_else(empire==1, 1, 0))
model_data <-
model_data %>%
rename(empire = "Please.rank.the.Star.Wars.films.in.order.of.preference.with.1.being.your.favorite.film.in.the.franchise.and.6.being.your.least.favorite.film. Star Wars: Episode V The Empire Strikes Back") %>%
filter(empire!="") %>%
mutate(empire = if_else(empire==1, 1, 0))
model_data <- tidy_dat %>% spread(key=question, value=response)
model_data <-
model_data %>%
rename(empire = "Please.rank.the.Star.Wars.films.in.order.of.preference.with.1.being.your.favorite.film.in.the.franchise.and.6.being.your.least.favorite.film. Star Wars: Episode V The Empire Strikes Back") %>%
filter(empire!="") %>%
mutate(empire = if_else(empire==1, 1, 0))
model_data
model_data <- tidy_dat %>% spread(key=question, value=response)
tidy_dat <- dat %>%
gather(key="question", value="response", -RespondentID)
tidy_dat$response[grepl(tidy_dat$question, pattern="Please\\.select\\.all") & tidy_dat$response!=""] <- "Yes"
tidy_dat$response[grepl(tidy_dat$question, pattern="Please\\.select\\.all") & tidy_dat$response==""] <- "No"
model_data <- tidy_dat %>% spread(key=question, value=response)
model_data <-
model_data %>%
rename(empire = "Please.rank.the.Star.Wars.films.in.order.of.preference.with.1.being.your.favorite.film.in.the.franchise.and.6.being.your.least.favorite.film. Star Wars: Episode V The Empire Strikes Back") %>%
filter(empire!="") %>%
mutate(empire = if_else(empire==1, 1, 0))
View(model_data)
model_data %>%
rename(empire = "Please.rank.the.Star.Wars.films.in.order.of.preference.with.1.being.your.favorite.film.in.the.franchise.and.6.being.your.least.favorite.film. Star Wars: Episode V The Empire Strikes Back")
model_data %>%
rename(empire = "Please.rank.the.Star.Wars.films.in.order.of.preference.with.1.being.your.favorite.film.in.the.franchise.and.6.being.your.least.favorite.film. Star Wars: Episode V The Empire Strikes Back")
colnames(model_data)
model_data <- model_data %>%
rename(empire = "Please.rank.the.Star.Wars.films.in.order.of.preference.with.1.being.your.favorite.film.in.the.franchise.and.6.being.your.least.favorite.film. Star Wars: Episode V The Empire Strikes Back") %>%
filter(empire!="") %>%
mutate(empire = if_else(empire==1, 1, 0))
model_data <- model_data %>%
dplyr::rename(empire = "Please.rank.the.Star.Wars.films.in.order.of.preference.with.1.being.your.favorite.film.in.the.franchise.and.6.being.your.least.favorite.film. Star Wars: Episode V The Empire Strikes Back") %>%
filter(empire!="") %>%
mutate(empire = if_else(empire==1, 1, 0))
model_data
model_data <- tidy_dat %>% spread(key=question, value=response)
model_data <- model_data %>%
dplyr::rename(empire = "Please.rank.the.Star.Wars.films.in.order.of.preference.with.1.being.your.favorite.film.in.the.franchise.and.6.being.your.least.favorite.film. Star Wars: Episode V The Empire Strikes Back") %>%
filter(empire!="") %>%
mutate(empire = if_else(empire==1, 1, 0))
model_data <- model_data %>%
select(RespondentID, Age, Gender, Education, Household.Income, Location..Census.Region., Which.character.shot.first., Are.you.familiar.with.the.Expanded.Universe., Do.you.consider.yourself.to.be.a.fan.of.the.Expanded.Universe..æ, empire)
model_data <- model_data %>% fastDummies::dummy_cols() %>% select(-c(Age, Gender, Education, Household.Income, Location..Census.Region., Which.character.shot.first., Are.you.familiar.with.the.Expanded.Universe., Do.you.consider.yourself.to.be.a.fan.of.the.Expanded.Universe..æ))
train <- sample_frac(model_data, size=0.8)
test <- model_data %>% filter(!RespondentID %in% train$RespondentID)
train <- train %>% select(-RespondentID)
test <- test %>% select(-RespondentID)
test_y <- test %>% pull(empire)
models_list <- list()
predicted_values <- list()
lm1 <- lm(empire ~ ., data= train)
summary(lm1)
lm1_pred <- predict(lm1, newdata = test)
lm1_pred_binary <- round(lm1_pred)
auc_lm1 <- pROC::roc(test_y, lm1_pred)
plot(auc_lm1)
predicted_values <- predicted_values %>% append(list("lm1"=as.factor(lm1_pred_binary)))
glm1 <- glm(empire ~ ., data= train, family="binomial")
summary(glm1)
glm1_pred <- predict(glm1, newdata = test)
glm1_pred[glm1_pred<0.5] <- 0
glm1_pred[glm1_pred>=0.5] <- 1
gam1 <- gam::gam(empire ~ ., data= train)
summary(gam1)
gam1_pred <- predict(gam1, newdata = test)
gam1_pred_binary <- round(gam1_pred)
predicted_values <- predicted_values %>% append(list("glm1"=as.factor(glm1_pred_binary),
"gam1"=as.factor(gam1_pred_binary)))
tree <- rpart::rpart(empire ~ ., data=train)
prp(tree)
?as.factor
tree_pred <- predict(tree, newdata=test)
tree_pred <- round(tree_pred)
tree_pred <- as.factor(tree_pred)
levels(tree_pred) <- c("0", "1")
predicted_values <- predicted_values %>% append(list("cart"=tree_pred))
precision_scores <- lapply(predicted_values, precision, reference = as.factor(test$empire))
recall_scores <- lapply(predicted_values, recall, reference = as.factor(test$empire))
F1_scores <- lapply(predicted_values, F_meas, reference = as.factor(test$empire))
F1_scores
recall_scores
precision_scores
F1_scores
glm1_pred_binary
glm1_pred
rand <- randomForest(empire ~ ., data=train, na.action = na.omit)
rand <- randomForest(empire ~ ., data=train, na.action = na.omit)
# # colnames(train) <- gsub(colnames(train), pattern=" ", replacement="")
# # colnames(train) <- gsub(colnames(train), pattern=" ", replacement="")
#
# train <- train %>%
#   mutate_if(is.integer, as.factor)
# test <- test %>%
#   mutate_if(is.character, as.factor)
ipak("randomForest")
rand <- randomForest(empire ~ ., data=train, na.action = na.omit)
print(rand)
knitr::opts_chunk$set(echo = TRUE)
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("tidyverse", "rpart", "rpart.plot")
ipak(packages)
raw_dat <- read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/star-wars-survey/StarWars.csv", header=T, stringsAsFactors=F, fileEncoding ="latin1")
head(raw_dat)
dat <- raw_dat
colnames(dat)[4:9] <- colnames(dat)[4]
colnames(dat)[10:15] <- colnames(dat)[10]
colnames(dat)[16:29] <- colnames(dat)[16]
questions <- colnames(dat)
responses <- raw_dat %>% filter(is.na(RespondentID)) %>% as.character()
responses[responses=="NA"] <- ""
responses[responses=="Response"] <- ""
knitted <- paste(questions, responses, sep=" ")
knitted <- trimws(knitted)
dat <- raw_dat %>% filter(is.na(RespondentID)==F)
colnames(dat) <- knitted
head(dat)
tidy_dat <- dat %>%
gather(key="question", value="response", -RespondentID)
tidy_dat$response[grepl(tidy_dat$question, pattern="Please\\.select\\.all") & tidy_dat$response!=""] <- "Yes"
tidy_dat$response[grepl(tidy_dat$question, pattern="Please\\.select\\.all") & tidy_dat$response==""] <- "No"
model_data <- tidy_dat %>% spread(key=question, value=response)
model_data <- model_data %>%
dplyr::rename(empire = "Please.rank.the.Star.Wars.films.in.order.of.preference.with.1.being.your.favorite.film.in.the.franchise.and.6.being.your.least.favorite.film. Star Wars: Episode V The Empire Strikes Back") %>%
filter(empire!="") %>%
mutate(empire = if_else(empire==1, 1, 0))
model_data <- model_data %>%
select(RespondentID, Age, Gender, Education, Household.Income, Location..Census.Region., Which.character.shot.first., Are.you.familiar.with.the.Expanded.Universe., Do.you.consider.yourself.to.be.a.fan.of.the.Expanded.Universe..æ, empire)
model_data <- model_data %>% fastDummies::dummy_cols() %>% select(-c(Age, Gender, Education, Household.Income, Location..Census.Region., Which.character.shot.first., Are.you.familiar.with.the.Expanded.Universe., Do.you.consider.yourself.to.be.a.fan.of.the.Expanded.Universe..æ))
model_data
train <- sample_frac(model_data, size=0.8)
test <- model_data %>% filter(!RespondentID %in% train$RespondentID)
train <- train %>% select(-RespondentID)
test <- test %>% select(-RespondentID)
test_y <- test %>% pull(empire)
models_list <- list()
predicted_values <- list()
lm1 <- lm(empire ~ ., data= train)
summary(lm1)
lm1_pred <- predict(lm1, newdata = test)
lm1_pred_binary <- round(lm1_pred)
auc_lm1 <- pROC::roc(test_y, lm1_pred)
plot(auc_lm1)
predicted_values <- predicted_values %>% append(list("lm1"=as.factor(lm1_pred_binary)))
glm1 <- glm(empire ~ ., data= train, family="binomial")
summary(glm1)
glm1_pred <- predict(glm1, newdata = test)
glm1_pred[glm1_pred<0.5] <- 0
glm1_pred[glm1_pred>=0.5] <- 1
gam1 <- gam::gam(empire ~ ., data= train)
summary(gam1)
gam1_pred <- predict(gam1, newdata = test)
gam1_pred_binary <- round(gam1_pred)
predicted_values <- predicted_values %>% append(list("glm1"=as.factor(glm1_pred_binary),
"gam1"=as.factor(gam1_pred_binary)))
glm1_pred_binary <- glm1_pred
gam1 <- gam::gam(empire ~ ., data= train)
summary(gam1)
gam1_pred <- predict(gam1, newdata = test)
gam1_pred_binary <- round(gam1_pred)
gam1_pred_binary
predicted_values <- predicted_values %>% append(list("glm1"=as.factor(glm1_pred_binary),
"gam1"=as.factor(gam1_pred_binary)))
pca <- prcomp(train, center = TRUE,scale. = TRUE)
summary(pca)
ipak("ggbiplot")
ggbiplot(pca, alpha=0.3)
tree <- rpart::rpart(empire ~ ., data=train)
prp(tree)
?as.factor
tree_pred <- predict(tree, newdata=test)
tree_pred <- round(tree_pred)
tree_pred <- as.factor(tree_pred)
levels(tree_pred) <- c("0", "1")
predicted_values <- predicted_values %>% append(list("cart"=tree_pred))
tree <- rpart::rpart(empire ~ ., data=train)
prp(tree)
?as.factor
tree_pred <- predict(tree, newdata=test)
tree_pred <- round(tree_pred)
tree_pred
tree <- rpart::rpart(empire ~ ., data=train)
tree
tree <- rpart::rpart(empire ~ Age_, data=train)
prp(tree)
train$empire
tree <- rpart::rpart(empire ~ Gender_Female, data=train)
prp(tree)
tree_pred <- predict(tree, newdata=test)
tree_pred <- round(tree_pred)
tree_pred <- as.factor(tree_pred)
levels(tree_pred) <- c("0", "1")
predicted_values <- predicted_values %>% append(list("cart"=tree_pred))
predicted_values
# # colnames(train) <- gsub(colnames(train), pattern=" ", replacement="")
# # colnames(train) <- gsub(colnames(train), pattern=" ", replacement="")
#
# train <- train %>%
#   mutate_if(is.integer, as.factor)
# test <- test %>%
#   mutate_if(is.character, as.factor)
ipak("randomForest")
rand <- randomForest(empire ~ ., data=train, na.action = na.omit)
train %>% select(.)
train
rand <- randomForest(empire ~ Age_:Gender_Male , data=train, na.action = na.omit)
?randomForest
rand <- randomForest(empire ~ Age_:Gender_Male , data=train, na.action = na.omit)
rand
rand <- randomForest(empire ~ . , data=train, na.action = na.omit)
x_train <- train %>% select(-empire)
y_train <- train %>% select(empire)
rand <- randomForest(x=x_train, y=y_train, na.action = na.omit)
y_train <- train %>% pull(empire)
rand <- randomForest(x=x_train, y=y_train, na.action = na.omit)
rand
y_train <- train %>% pull(empire) %>% as.factor()
rand <- randomForest(x=x_train, y=y_train, na.action = na.omit)
rand
predict(rand, test %>% select(-empire))
rand_binary <- predict(rand, test %>% select(-empire))
rand_pred <- predict(rand, test %>% select(-empire))
predicted_values <- predicted_values %>% append(list("rand"=rand_pred))
ipak("caret")
ipak("caret")
precision_scores <- lapply(predicted_values, precision, reference = as.factor(test$empire))
precision_scores <- lapply(predicted_values, precision, reference = as.factor(test$empire))
recall_scores <- lapply(predicted_values, recall, reference = as.factor(test$empire))
F1_scores <- lapply(predicted_values, F_meas, reference = as.factor(test$empire))
F1_scores
recall_scores
precision_scores
knitr::opts_chunk$set(echo = TRUE, message = F, warning=F)
knitr::opts_chunk$set(echo = TRUE, message = F, warning=F)
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("tidyverse", "rpart", "rpart.plot", "caret", "randomForest", "ggbiplot")
ipak(packages)
raw_dat <- read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/star-wars-survey/StarWars.csv", header=T, stringsAsFactors=F, fileEncoding ="latin1")
F1_scores
F1_scores
varImpPlot(rand,type=2)
plot(rand)
rand <- randomForest(x=x_train, y=y_train, na.action = na.omit, ntree = 1000)
plot(rand)
